@page "/"
@using ScrapperWebApp.Data
@using ScrapperWebApp.Models
@using ScrapperWebApp.Services
@using ScrapperWebApp.Services.Interfaces
@attribute [StreamRendering]
@inherits OwningComponentBase<FiltroService>
@inject IScrapperService scrapperService
@inject IEmpresaService empresaService
@inject IImportService importService
@inject IFiltroService filteroService
@rendermode InteractiveServer
@inject NavigationManager NavigationManager

<PageTitle>Scrapper</PageTitle>
<MudOverlay Visible="showLoader" DarkBackground="true" ZIndex="9999">
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
</MudOverlay>
<MudContainer Class="mt-16" MaxWidth="MaxWidth.ExtraLarge">
    <div class="row">

        <div class="col-12 text-right" style="text-align: right !important">
            <button @onclick="GoToExport" class="btn btn-sm btn-success">Export</button>
            <button @onclick="CheckRegisteredUsers" class="btn btn-sm btn-primary">Check Registered Users</button>
            <button @onclick="ImportFiltroData" class="btn btn-sm btn-warning">Import Filtro Data</button>
            <button @onclick="ImportCepData" class="btn btn-sm btn-warning">Import Cep Data</button>
            <button @onclick="ImportAtivdadeData" class="btn btn-sm btn-warning">Import Atividade Data</button>

        </div>

    </div>
    <div class="row">
        <div class="col-4"></div>
        <div class="col-4"></div>
        <div class="col-4 text-right" style="text-align: right !important">
            <div class="mt-2">
                @if (!cepSeederCompleted || !atividadeSeederCompleted || !filtroSeederCompleted)
                {
                    <MudAlert Severity="Severity.Error" Variant="Variant.Outlined">An error occurred, maybe file not found. Please check file path</MudAlert>
                }
                <MudAlert Class="d-flex justify-end" Dense="true" Severity="Severity.Warning" Variant="Variant.Outlined">Supports xlsx, xlsm format files (table will cleared before import)</MudAlert>
                @if (showAlertMessage)
                {
                    <MudAlert Severity="Severity.Info" Variant="Variant.Outlined">@alertText</MudAlert>
                }
            </div>

        </div>
    </div>


    @if (filtros == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <hr />
        <div class="row">
            <div class="col-3">
                <button disabled="@CheckIfFiltersExists()" @onclick="GetScrappedData" class="btn btn-success">Start Scrapper</button>
            </div>
            <div class="col-6"></div>
            <div class="col-3 text-right" style="text-align: right !important">
                <button class="btn btn-danger float-end">Stop Scrapper</button>
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col-12">
                <div class="alert alert-dark text-center" role="alert">Step 01 - API 01</div>
            </div>
            <div class="col-6">



                @if (loader == true)
                {
                    <p class="text-primary"><em>Scrapping Data, Please Wait...</em></p>
                }
            </div>
            @if (!string.IsNullOrEmpty(@error))
            {
                <div class="col-6">
                    <div class="text-danger">@error</div>
                </div>
            }
            <hr />
        </div>
        <table class="table table-borderless">
            <thead>
                <tr><th>Running filter @currentFilterIndex of @filtros.Count</th></tr>
                <tr>
                    <th>CEP</th>
                    <th>Data de Abertura - A partir de</th>
                    <th>Data de Abertura - Ate</th>
                    <th>Cd Mei</th>
                    <th>Total de Registros</th>
                    <th>Registros Salvos</th>
                </tr>
            </thead>
            <tbody>
                @if (showFilter == true)
                {
                    <tr>
                        <td class="align-content-center">@currentFilter.NoCep</td>
                        <td class="align-content-center">@currentFilter.DtInicial</td>
                        <td class="align-content-center">@currentFilter.DtFinal</td>
                        <td class="align-content-center">
                            @if (@currentFilter.CdMei == "Sim")
                            {
                                <MudChip Color="Color.Success">@currentFilter.CdMei</MudChip>
                            }
                            else if (@currentFilter.CdMei == "Não")
                            {
                                <MudChip Color="Color.Error">@currentFilter.CdMei</MudChip>
                            }
                            else
                            {
                                @currentFilter.CdMei
                            }
                        </td>
                        <td class="align-content-center">@currentFilter.NoContador</td>
                        <td class="align-content-center">0</td>
                    </tr>
                }
                else
                {
                    <tr><p class="text-danger"><em>No filter in progress at the moment</em></p>  </tr>
                }
            </tbody>
        </table>
        <div class="row">
            <div class=" col-12">
                <div class="alert alert-dark text-center" role="alert">Step 02 - API 02</div>
            </div>
        </div>

        <table class="table">
            <thead>
                <tr>
                    <th>CEP</th>
                    <th>Data de Abertura - A partir de</th>
                    <th>Data de Abertura - Ate</th>
                    <th>Cd Mei</th>
                    <th>Total de Registros</th>
                </tr>
            </thead>
            <tbody>
                @if (filtros == null || filtros.Count == 0)
                {
                    if (filtros.Count == 0)
                    {
                        <tr><p class="text-danger"><em>No Filters Found...</em></p></tr>
                    }
                    else
                    {
                        <tr><p class="text-success"><em>Loading Filters...</em></p></tr>
                    }
                }
                else
                {
                    @foreach (var filter in filtros)
                    {
                        <tr>
                            <td class="align-content-center">@filter.NoCep</td>
                            <td class="align-content-center">@filter.DtInicial</td>
                            <td class="align-content-center">@filter.DtFinal</td>
                            <td class="align-content-center">
                                @if (@filter.CdMei == "Sim")
                                {
                                    <MudChip Color="Color.Success">@filter.CdMei</MudChip>
                                }
                                else if (@filter.CdMei == "Não")
                                {
                                    <MudChip Color="Color.Error">@filter.CdMei</MudChip>
                                }
                                else
                                {
                                    @filter.CdMei
                                }
                            </td>
                            <td class="align-content-center">
                                <MudText Typo="Typo.subtitle1">@filter.NoContador</MudText>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    }
</MudContainer>

@code {
    string warninngMessage = string.Empty;
    List<Filtro> filtros = new List<Filtro>();
    List<Filtro> records = new List<Filtro>();
    bool cepSeederCompleted = true;
    bool atividadeSeederCompleted = true;
    bool filtroSeederCompleted = true;
    bool loader = false;
    bool showFilter = false;
    Filtro filter = new Filtro();
    Filtro currentFilter = new Filtro();
    string error = string.Empty;
    string alertText = string.Empty;
    bool showAlertMessage = false;
    int currentFilterIndex = 0;
    bool showLoader = false;

    protected override async Task OnInitializedAsync()
    {
        showLoader = true;
        StateHasChanged();
        await GetFiltros();
        showLoader = false;
        StateHasChanged();
    }
    void GoToExport()
    {
        NavigationManager.NavigateTo("Export");
    }
    protected async Task GetFiltros()
    {
        try
        {
            var response = await @filteroService.GetFiltrosWhereAsync();
            if (response.Success)
            {
                filtros = response.Output;
            }
            else warninngMessage = response.Message;
        }
        catch (Exception ex)
        {
            warninngMessage = ex.Message;
        }

    }
    protected bool CheckIfFiltersExists()
    {
        return filtros.Count == 0 ? true : false;
    }
    protected void CheckRegisteredUsers()
    {
        scrapperService.CheckRegistered();

    }
    protected async void GetScrappedData()
    {
        loader = true;

        // loop to iterate all filters
        foreach (var filter in filtros)
        {
            currentFilter = filter;
            currentFilterIndex = currentFilterIndex + 1;
            showFilter = true;
            StateHasChanged();
            records = await @scrapperService.GetMainRecords(currentFilter);
            StateHasChanged();
            if (filtros == null || filtros.Count == 0)
            {
                error = "No Data Found for this Filtro";
            }
            else
            {
                // Get Scrapped results
                Console.WriteLine(DateTime.Now.ToString("MM/dd/yyyy HH:mm:ss") + ": Starting Filter " + filter.NoCep);

                var data = await @scrapperService.GetScrappedData(filter);

                // Save Parsed results to Empresa and linked tables
                if (data != null && data.Count() > 0)
                {
                    await empresaService.CreateEmpresaAsync(data);
                }
                // Add 1 day to dt_inicial and dt_final
                await filteroService.UpdateFiltroDatesAsync(filter);
                Console.WriteLine(DateTime.Now.ToString("MM/dd/yyyy HH:mm:ss") + ": Ending Filter " + filter.NoCep);
            }
            currentFilter = null;
            showFilter = false;
            StateHasChanged();
        }
        loader = false;
        StateHasChanged();
    }
    protected async void ScrapeDetails()
    {
        foreach (var filter in filtros)
        {
            var data = await @scrapperService.GetScrappedData(filter);
            //await empresaService.CreateEmpresaAsync(data);
        }
    }

    protected async void ImportFiltroData()
    {
        showLoader = true;
        StateHasChanged();

        showAlertMessage = true;
        alertText = "Filtro table data import in progress.";
        StateHasChanged();
        filtroSeederCompleted = await importService.SeedFiltroData();
        showAlertMessage = false;
        StateHasChanged();
        await GetFiltros();

        showLoader = false;
        StateHasChanged();
    }
    protected async void ImportCepData()
    {
        showLoader = true;
        StateHasChanged();

        showAlertMessage = true;
        alertText = "Cep table data import in progress.";
        StateHasChanged();
        cepSeederCompleted = await importService.SeedCepData();
        showAlertMessage = false;
        StateHasChanged();
        await GetFiltros();

        showLoader = false;
        StateHasChanged();
    }
    protected async void ImportAtivdadeData()
    {
        showLoader = true;
        StateHasChanged();

        showAlertMessage = true;
        alertText = "Atividade table data import in progress.";
        StateHasChanged();
        atividadeSeederCompleted = await importService.SeedAtividadeData();
        showAlertMessage = false;
        StateHasChanged();
        await GetFiltros();

        showLoader = false;
        StateHasChanged();
    }

}
