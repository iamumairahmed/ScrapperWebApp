@page "/Export"
@using ScrapperWebApp.Data
@using ScrapperWebApp.Models
@using ScrapperWebApp.Services
@using ScrapperWebApp.Services.Interfaces
@attribute [StreamRendering]
@inject IAtividadeService atividadeService
@inject ICepService cepService
@inject IExportService exportService
@inject INatJurService natJurService
@rendermode InteractiveServer
@inject ISnackbar Snackbar

<PageTitle>Export</PageTitle>
<MudOverlay Visible="!loadingCompleted" DarkBackground="true" ZIndex="9999">
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
</MudOverlay>
<MudContainer Class="mt-16" MaxWidth="MaxWidth.ExtraLarge">

<div class="row">
    <div class="col-4">
        <h2>Export Data</h2>
    </div>
</div>

<hr />


    <div class="mb-3">
        <div class="form-row">
            <div class="col-6">
                <MudSelect Label="Atividades" Clearable="true" MultiSelection="true" @bind-SelectedValues="exportDto.selectedAtividades" AdornmentIcon="@Icons.Material.Filled.Search" AnchorOrigin="Origin.BottomCenter" ToStringFunc="ToStringConverter">
                @foreach (var elem in atividades)
                {
                    <MudSelectItem Value="@elem.NoAtividade">@GenerateAtividadeLabel(elem.NoAtividade)</MudSelectItem>
                }
                </MudSelect>
                @* <InputSelect multiple placeholder="Select Atividade " class="form-control" id="atividade" @bind-Value="selectAtividades">
                    @foreach (var elem in @atividades)
                    {
                        <option value="@elem.NoAtividade">@elem.DsAtividade</option>
                    }
                </InputSelect> *@
            </div>
            <div class="col-6">
                <MudSelect Label="Natureza Juridica" Clearable="true" MultiSelection="true"  @bind-SelectedValues="exportDto.selectedNatJurs" AdornmentIcon="@Icons.Material.Filled.Search" AnchorOrigin="Origin.BottomCenter" ToStringFunc="ToStringConverterNatJur">
                    @foreach (var elem in natJurs)
                    {
                        <MudSelectItem T="int?" Value="@elem.NoNatjur">@GenerateNatJurLabel(elem.NoNatjur)</MudSelectItem>
                    }
                </MudSelect>
            </div>
        </div>

    </div>

    <div class="mb-3">
        <div class="form-row">
            <div class="col-6">
            <MudSelect T="string" Label="Situacao Cadastral" AnchorOrigin="Origin.BottomCenter" @bind-Value="exportDto.selectedSitCad">
                    @foreach (var elem in situacaoCadastral)
                    {
                        <MudSelectItem Value="@elem">@elem</MudSelectItem>
                    }
            </MudSelect>
                   
            </div>

            <div class="col-6">
                <MudSelect Clearable="true" MultiSelection="true" Label="Estado (UF)" @bind-SelectedValues="exportDto.selectedEstado" AdornmentIcon="@Icons.Material.Filled.Search" AnchorOrigin="Origin.BottomCenter">
                @foreach (var est in estados)
                {
                    <MudSelectItem Value="@est">@est</MudSelectItem>
                }
            </MudSelect>
                
            </div>
        </div>
    </div>
    <div class="mb-3">
        <div class="form-row">
            <div class="col-6">
                <MudAutocomplete FullWidth="true" MaxLength="8" MinCharacters=8 T="string" Label="Ceps" SearchFunc="@SearchCep" ValueChanged="@UpdateSelectedCep" />

                <MudAlert Severity="Severity.Warning" NoIcon="true" Class="my-2">Add 8 digit CEP to search from database</MudAlert>

            </div>
            <div class="col-6">
                <MudText Typo="Typo.subtitle1">Selected CEPs</MudText>
                <MudChipSet AllClosable="true" OnClose="Closed">
                    @foreach (var value in exportDto.selectedCep)
                    {
                        <MudChip Text="@value" Color="Color.Primary"></MudChip>
                    }
                </MudChipSet>
            </div>
        </div>
    </div>

    <div class="mb-3">
        <div class="form-row">
            <div class="col-6">
                <label class="form-label" for="todo-item"><b>Data de Abertura - A partir de </b></label>
                <InputDate @bind-Value="@exportDto.DateFrom" class="form-control" />
            </div>

            <div class="col-6">
                <label class="form-label" for="todo-item"><b>Data de Abertura - Ate </b></label>
                <InputDate @bind-Value="@exportDto.DateUntil" class="form-control" />
            </div>
           
        </div>
    </div>

    <div class="mb-3">
        <div class="form-row">
            <div class="col-6">
            <MudToggleIconButton @bind-Toggled="@exportDto.somonteMEI"
                                 Icon="@Icons.Material.Filled.ToggleOff" Color="@Color.Error" Title="Off"
                                 ToggledIcon="@Icons.Material.Filled.ToggleOn" ToggledColor="@Color.Success" ToggledTitle="On" />

            <span>Somente MEI </span>
            </div>

            <div class="col-6">
            <MudToggleIconButton @bind-Toggled="@exportDto.withPhone"
                                 Icon="@Icons.Material.Filled.ToggleOff" Color="@Color.Error" Title="Off"
                                 ToggledIcon="@Icons.Material.Filled.ToggleOn" ToggledColor="@Color.Success" ToggledTitle="On" />

            <span>Com Contato de telefone </span>
            </div>

        </div>
    </div>

    <div class="mb-3">
        <div class="form-row">
            <div class="col-4">
                <MudToggleIconButton @bind-Toggled="@exportDto.withoutMEI"
                                         Icon="@Icons.Material.Filled.ToggleOff" Color="@Color.Error" Title="Off"
                                         ToggledIcon="@Icons.Material.Filled.ToggleOn" ToggledColor="@Color.Success" ToggledTitle="On" />

                <span>Excluir MEI</span>
            </div>

            <div class="col-4">
            <MudToggleIconButton @bind-Toggled="@exportDto.cellOnly"
                                     Icon="@Icons.Material.Filled.ToggleOff" Color="@Color.Error" Title="Off"
                                     ToggledIcon="@Icons.Material.Filled.ToggleOn" ToggledColor="@Color.Success" ToggledTitle="On" />

            <span>Somente celular</span>
            </div>

            <div class="col-4">
                <MudToggleIconButton @bind-Toggled="@exportDto.withEmail"
                                     Icon="@Icons.Material.Filled.ToggleOff" Color="@Color.Error" Title="Off"
                                     ToggledIcon="@Icons.Material.Filled.ToggleOn" ToggledColor="@Color.Success" ToggledTitle="On" />

                <span>Com e-mail</span>
            </div>
        </div>
    </div>

    <hr />
    <div class="mb-3">
        <div class="form-row justify-content-center">
            <button class="btn btn-success m-2" @onclick="Search">Pesquisar</button>
            <button class="btn btn-warning  m-2">Registros encontrados @totalRecords</button>
            <button class="btn btn-outline-dark m-2" disabled="@IsDisabled" @onclick="ExportData">Gerar Arquivo</button>

        </div>
        <MudAlert Severity="Severity.Warning" hidden="@hideError">@errorMsg</MudAlert>
        @if (showExportAlert)
        {
            <MudAlert Severity="Severity.Success" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true" CloseIconClicked="(() => CloseExportAlert(false))">File Exported Successfully!</MudAlert>
        }
    </div>
</MudContainer> 
@code {
    protected Func<int, string> ToStringConverter;
    protected Func<int?, string> ToStringConverterNatJur;

    private int noAtividadeId { get; set; }
    bool showExportAlert = false;
    string sitCadId = string.Empty;
    string[] situacaoCadastral = ["ATIVA", "BAIXADA", "INAPTA", "NULA"];
    public bool somonteMEI { get; set; }
    public bool withPhone { get; set; }
    public bool withEmail { get; set; }
    public bool withoutMEI { get; set; }
    public bool cellOnly { get; set; }
    public bool loadingCompleted = false;
    public List<string> selectedCeps = new List<string>();

    public List<string> estados { get; set; } = new List<string>();
    public int totalRecords = 0;
    public bool showTotalRecords = false;
    public string cep = "";
    List<Empresa> searchResults = new List<Empresa>();
    List<Atividade> atividades = new List<Atividade>();
    List<Cep> ceps = new List<Cep>();
    List<NatJur> natJurs = new List<NatJur>();
    List<int> selectAtividades = new List<int>();
    public ExportDto exportDto { get; set; }
    int amount1 = 10;
    string errorMsg = string.Empty;
    bool IsDisabled = true;
    bool hideError = true;

    protected override async Task OnInitializedAsync()
    {
        ToStringConverter = GenerateAtividadeLabel;
        ToStringConverterNatJur = GenerateNatJurLabel;

        exportDto = new ExportDto();
        var atividadesResponse = await atividadeService.GetAtividadesAsync();
        if (atividadesResponse.Success)
        {
            atividades = atividadesResponse.Output;
        }

        var natJurResponse = await natJurService.GetNatJurAsync();
        if (natJurResponse.Success)
        {
            natJurs = natJurResponse.Output;
        }

        var estadosEsponse = await cepService.GetEstadoAsync();
        if (estadosEsponse.Success)
        {
            estados = estadosEsponse.Output;

        }

        loadingCompleted = true;
        StateHasChanged();
    }

    public void Closed(MudChip chip) => exportDto.selectedCep.Remove(chip.Text);
    private void CloseExportAlert(bool value)
    {
        showExportAlert = false;
    }
    protected async void ExportData()
    {
        loadingCompleted = false;
        StateHasChanged();
        if (searchResults != null && searchResults.Count() > 0)
        {
            Task.Delay(10000);
            await exportService.ExportData(searchResults);
        }
        else
        {
            errorMsg = "Please search records first";
            hideError = false;
        }
        showExportAlert = true;
        loadingCompleted = true;
        StateHasChanged();
    }
    protected async void Search()
    {
        loadingCompleted = false;
        showTotalRecords = false;
        StateHasChanged();
        var results = await exportService.SearchExportData(exportDto);
        if (results.Success)
        {
            totalRecords = results.Output.Count;
            searchResults = results.Output;
            IsDisabled = false;
            showTotalRecords = true;
            loadingCompleted = true;
            StateHasChanged();
        }
    }

    private string GenerateAtividadeLabel(int elem)
    {
        var result = atividades.FirstOrDefault(u => u.NoAtividade == elem);
        return $"{result.NoAtividade} - {result.DsAtividade}";
    }
    private string GenerateNatJurLabel(int? elem)
    {
        var result = natJurs.FirstOrDefault(u => u.NoNatjur == elem);
        return $"{result.NoNatjur} - {result.DsNatjur}";
    }
   
    private async Task<IEnumerable<string>> SearchCep(string value)
    {
        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return null;

        var cepResponse = await cepService.GetSingleCepAsync(value);
        if (cepResponse.Success)
        {
            ceps = cepResponse.Output;

        }

        return ceps.Select(x => x.NoCep);

        //return states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
    protected void UpdateSelectedCep(string value)
    {
        if (!exportDto.selectedCep.Contains(value))
        {
            exportDto.selectedCep.Add(value);
        }
    }
}
